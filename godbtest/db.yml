---
# 提供 HTTP API
# 例如：gurl :8811 POST q="select * from activities"
# 请求 JSON 示例：{ "q": "select * from activities", "limit": 1000, "labelQuery":"driverName == sqlite" }，其中， limit 可选，默认1000，labelQuery 可选，默认第1个可用的数据源
# $ gurl :8811 POST q="select * from activities" -pb -raw
# {"header":["id","time","description"],"rows":[
# {"description":"christmas eve bike class","id":1,"time":"not a date"},
# {"description":"sledding with nephew","id":4,"time":"2021-12-09T16:56:23Z"},
# {"description":"山东省聊城市筀鄬路5620号斊遵小区11单元1747室","id":5,"time":"2033-06-16T20:51:39Z"}],"cost":"32.88µs"}
# $ gurl :8811 POST q="insert into activities values(NULL,'@random_time(yyyy-MM-ddTHH:mm:ssZ)', '@地址')" -pb -raw
# {"header":["lastInsertId","rowsAffected","error"],"rows":[{"error":null,"lastInsertId":6,"rowsAffected":1}],"cost":"2.866µs"}
# listenAddr: ":8811"
# contextPath: /
# https://codebeautify.org/yaml-parser-online

dataSources:
  - driverName: dm
    disabled: true
    name: 达梦
    dataSourceName: dm://SYSDBA:123456789@192.168.126.247:5236?schema=MICROSERVICES_PLATFORM
    labels:
      id: 1

  - driverName: pgx # or postgres
    disabled: true
    name: 人大金仓
    dataSourceName: postgres://SYSTEM:111111@192.168.126.247:54321/microservices_platform?sslmode=disable
    labels:
      db: kingbase

  - driverName: sqlite # or sqlite3
    name: sqlite
    dataSourceName: ":memory:"
    #disabled: true

  - driverName: mysql
    name: 本机 MySQL
    dataSourceName: root:root@(127.0.0.1:3306)/mysql?charset=utf8mb4&parseTime=true&loc=Local
  #    disabled: true

  - driverName: oracle
    name: oracle
    # dataSourceName: oracle://user:pass@server:1521/service_name?lob fetch=post
    # export ORA_DSN="oracle://johny:1234@10.7.21.12:1521/helowin?lob fetch=post"
    dataSourceEnv: ORA_DSN
    disabled: true

# prompt: always # once / none
limit: 20

actions:

  - labelQuery: driverName == oracle
    disabled: false
    # Docker安装Oracle11g https://www.cnblogs.com/mike666/p/13999397.html
    # https://stackoverflow.com/questions/18403125/how-to-create-a-new-schema-new-user-in-oracle-database-11g
    sqls:
      - sql: select tablespace_name from dba_tablespaces;
        name: show tablespaces
      - sql: select * from session_privs;
        name: show session_privs
        ignoreError: true
      - sql: >
          CREATE TABLE books (id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, title VARCHAR2(100) NOT NULL);
          CREATE TABLE t1 (id INT GENERATED ALWAYS AS IDENTITY, c1 VARCHAR2(32));
        name: IDENTITY Columns on Oracle 12c+
      - sql: >
          create tablespace tbs_johny datafile 'johny.dbf' size 10M autoextend on;
          create temporary tablespace tbs_johny_temp tempfile 'johny_temp.dbf' size 5M autoextend on;
          create user johny identified by johny_k0 default tablespace tbs_johny temporary tablespace tbs_johny_temp;
          grant create session to johny;
          grant create table to johny;
          grant resource to johny;
          grant unlimited tablespace to johny;
        name: create demo user and tablespace
      - sql: >
          create table johny_table (id int not null, text varchar2(1000), primary key (id) );
          insert into johny_table (id, text) values (1, 'This is some text.');
          select * from johny_table;
        name: create demo table
      - sql: >
          SELECT DBMS_METADATA.GET_DDL('TABLE',u.table_name) FROM USER_TABLES u where u.table_name = '{{table_name}}';
          SELECT DBMS_METADATA.GET_DDL('INDEX',u.index_name) FROM USER_INDEXES u;
        name: show table meta
      - sql: >
          select * from johny_table

  - labelQuery: driverName == dm && id == 1
    disabled: false
    sqls:
      - sql: DROP TABLE TAB_12
        ignoreError: true
      - sql: >
          CREATE TABLE "TAB_12" ("ID" INT IDENTITY (1, 1) NOT NULL, "NAME" VARCHAR(10), NOT CLUSTER PRIMARY KEY("ID"))
      - sql: >
          insert into TAB_12 (NAME) values ('bingoo')
      - sql: >
          select * from TAB_12

  - labelQuery: driverName == pgx
    disabled: false
    sqls:
      - sql: select 'Hello, world!'
      - sql: DROP TABLE COMPANY
        ignoreError: true
      - sql: >
          CREATE TABLE COMPANY(ID SERIAL PRIMARY KEY, NAME VARCHAR(100) NOT NULL,
           AGE INT NOT NULL,ADDRESS VARCHAR(50), SALARY REAL);
        ignoreError: true
      - sql: >
          INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES('Paul', 32, 'California', 20000.00) RETURNING ID;
          INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES('Allen', 25, 'Texas', 15000.00) RETURNING ID;
          INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES('Teddy', 23, 'Norway', 20000.00 ) RETURNING ID;
          INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES('Mark', 25, 'Rich-Mond ', 65000.00 ) RETURNING ID;
          INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES('David', 27, 'Texas', 85000.00 ) RETURNING ID;
          INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES('James', 24, 'Houston', 10000.00 ) RETURNING ID;
      - sql: >
          INSERT INTO COMPANY (NAME,AGE,ADDRESS,SALARY) VALUES('@name', @random_int(20-50), '@state', @random_int(20000-100000) ) RETURNING ID;
        iterations: 10
      - sql: select * from COMPANY order by ID

  # https://www.percona.com/blog/migrating-to-utf8mb4-things-to-consider/
  - labelQuery: driverName == mysql
    sqls:
      - sql: show databases
        name: list databases
      - sql: show tables
        name: list tables
      - sql: select * from information_schema.tables where table_name = '{{table_name}}'
        name: show table information
      - sql: >
          CREATE TABLE charset_len( name VARCHAR(255), val CHAR(1) ) ENGINE=InnoDB CHARACTER SET=utf8mb4;
          INSERT INTO charset_len VALUES('Latin A', 'A'), ('Cyrillic А', 'А'), ('Korean ㉿', '㉿'), ('Dolphin 🐬', '🐬');
          SELECT name, val, HEX(val), BIT_LENGTH(val)/8 FROM charset_len;
          
          -- CREATE DATABASE IF NOT EXISTS sharding-test DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
          CREATE DATABASE IF NOT EXISTS `sharding-test` DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_general_ci;

          use `sharding-test`;

          CREATE TABLE IF NOT EXISTS `account_0` (
            `id` bigint(20) NOT NULL,
            `username` varchar(64) NOT NULL,
            `phone` varchar(32) DEFAULT NULL,
            `province` varchar(64) DEFAULT NULL,
            `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (`id`)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

          CREATE TABLE IF NOT EXISTS `account_1` (
            `id` bigint(20) NOT NULL,
            `username` varchar(64) NOT NULL,
            `phone` varchar(32) DEFAULT NULL,
            `province` varchar(64) DEFAULT NULL,
            `createtime` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (`id`)
          ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
          
          DROP TABLE IF EXISTS Books;
          CREATE TABLE Books(Id int NOT NULL AUTO_INCREMENT PRIMARY KEY, Title VARCHAR(100), Author VARCHAR(60)) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
          INSERT INTO Books(Title, Author) VALUES('War and Peace', 'Leo Tolstoy');
          INSERT INTO Books(Title, Author) VALUES ('The Brothers Karamazov',  'Fyodor Dostoyevsky');
          SELECT * FROM Books;

        ignoreError: true

  - labelQuery: driverName == sqlite
    # disabled: true
    sqls:
      - sql: SELECT * FROM sqlite_master where name = '{{table_name}}'
        name: show table
      - sql: SELECT * FROM sqlite_temp_master
        name: show temp table
      - sql: >
          drop table if exists t;
          create table IF NOT EXISTS t(i);
          insert into t values(42), (314);
          select * from t;
          CREATE TABLE IF NOT EXISTS unix_time (time datetime); 
          INSERT INTO unix_time (time) VALUES (strftime('%Y-%m-%dT%H:%MZ','now'));
          SELECT time FROM unix_time;
          CREATE TABLE IF NOT EXISTS [activities] (id INTEGER NOT NULL PRIMARY KEY,  time DATETIME NOT NULL, description TEXT );
          insert into activities values (NULL,"not a date","christmas eve bike class");
          select * from activities;
          insert into activities values(NULL,"2021-12-09T16:34:04Z","christmas eve bike class");
          insert into activities values(NULL,"2021-12-09T16:56:12Z","cross country skiing is horrible and cold");
          insert into activities values(NULL,"2021-12-09T16:56:23Z","sledding with nephew");
          insert into activities values(NULL,"2021-12-09T16:56:23Z",'{"name":"bingoo"}');
          insert into activities values(NULL,'@random_time(yyyy-MM-ddTHH:mm:ssZ)', '@地址');
          select * from activities;
          select * from activities where id = 5\G
        format: json:free

# 1. @uuid  @ksuid @name
# 2. @汉字  @姓名  @性别 @地址  @手机  @身份证  @发证机关  @邮箱   @银行卡
# 3. @random(5-10) @random(red,green,blue)  @random(1,2,3)
# 4. @regex([abc]{10})
# 5. @random_int" @random_int(100-999)" @random_bool")
# 6. @random_time" @random_time(yyyy-MM-dd) @random_time(yyyy-MM-ddTHH:mm:ss)
# 7. @random_time(yyyy-MM-dd,1990-01-01,2021-06-06) @random_time(sep=# yyyy-MM-dd#1990-01-01#2021-06-06)
# 8. @seq create sequence starting from 1, or @seq(100)  create sequence starting from 100.